// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: master_service.proto

package protobuf

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	WorkerIndex          int32    `protobuf:"varint,1,opt,name=workerIndex,proto3" json:"workerIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a501bcba839fe29, []int{0}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

type RegisterResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a501bcba839fe29, []int{1}
}
func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

type CalculateFinishRequest struct {
	WorkerIndex          int32    `protobuf:"varint,1,opt,name=workerIndex,proto3" json:"workerIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculateFinishRequest) Reset()         { *m = CalculateFinishRequest{} }
func (m *CalculateFinishRequest) String() string { return proto.CompactTextString(m) }
func (*CalculateFinishRequest) ProtoMessage()    {}
func (*CalculateFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a501bcba839fe29, []int{2}
}
func (m *CalculateFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculateFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculateFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateFinishRequest.Merge(m, src)
}
func (m *CalculateFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *CalculateFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateFinishRequest proto.InternalMessageInfo

type CalculateFinishResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculateFinishResponse) Reset()         { *m = CalculateFinishResponse{} }
func (m *CalculateFinishResponse) String() string { return proto.CompactTextString(m) }
func (*CalculateFinishResponse) ProtoMessage()    {}
func (*CalculateFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a501bcba839fe29, []int{3}
}
func (m *CalculateFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculateFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculateFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateFinishResponse.Merge(m, src)
}
func (m *CalculateFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *CalculateFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateFinishResponse proto.InternalMessageInfo

type FinishRequest struct {
	//duration time of aggregator
	AggregatorSeconds     float64 `protobuf:"fixed64,1,opt,name=aggregatorSeconds,proto3" json:"aggregatorSeconds,omitempty"`
	AggregatorOriSize     int32   `protobuf:"varint,2,opt,name=aggregatorOriSize,proto3" json:"aggregatorOriSize,omitempty"`
	AggregatorReducedSize int32   `protobuf:"varint,3,opt,name=aggregatorReducedSize,proto3" json:"aggregatorReducedSize,omitempty"`
	IterationNum          int64   `protobuf:"varint,4,opt,name=iterationNum,proto3" json:"iterationNum,omitempty"`
	//duration time of partial SSSP loop
	IterationSeconds float64 `protobuf:"fixed64,5,opt,name=iterationSeconds,proto3" json:"iterationSeconds,omitempty"`
	//duration time of combine message
	CombineSeconds float64 `protobuf:"fixed64,6,opt,name=combineSeconds,proto3" json:"combineSeconds,omitempty"`
	//number of updated boarders node pair
	UpdatePairNum int32 `protobuf:"varint,7,opt,name=updatePairNum,proto3" json:"updatePairNum,omitempty"`
	//number of destinations which message send to
	DstPartitionNum int32 `protobuf:"varint,8,opt,name=dstPartitionNum,proto3" json:"dstPartitionNum,omitempty"`
	//duration of a worker send to message to all other workers
	AllPeerSend float64 `protobuf:"fixed64,9,opt,name=allPeerSend,proto3" json:"allPeerSend,omitempty"`
	//size of worker to worker communication pairs
	PairNum              []*WorkerCommunicationSize `protobuf:"bytes,10,rep,name=pairNum,proto3" json:"pairNum,omitempty"`
	WorkerID             int32                      `protobuf:"varint,11,opt,name=workerID,proto3" json:"workerID,omitempty"`
	MessageToSend        bool                       `protobuf:"varint,12,opt,name=MessageToSend,proto3" json:"MessageToSend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *FinishRequest) Reset()         { *m = FinishRequest{} }
func (m *FinishRequest) String() string { return proto.CompactTextString(m) }
func (*FinishRequest) ProtoMessage()    {}
func (*FinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a501bcba839fe29, []int{4}
}
func (m *FinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishRequest.Merge(m, src)
}
func (m *FinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *FinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinishRequest proto.InternalMessageInfo

type WorkerCommunicationSize struct {
	WorkerID             int32    `protobuf:"varint,1,opt,name=workerID,proto3" json:"workerID,omitempty"`
	CommunicationSize    int32    `protobuf:"varint,2,opt,name=communicationSize,proto3" json:"communicationSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerCommunicationSize) Reset()         { *m = WorkerCommunicationSize{} }
func (m *WorkerCommunicationSize) String() string { return proto.CompactTextString(m) }
func (*WorkerCommunicationSize) ProtoMessage()    {}
func (*WorkerCommunicationSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a501bcba839fe29, []int{5}
}
func (m *WorkerCommunicationSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerCommunicationSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerCommunicationSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerCommunicationSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerCommunicationSize.Merge(m, src)
}
func (m *WorkerCommunicationSize) XXX_Size() int {
	return m.Size()
}
func (m *WorkerCommunicationSize) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerCommunicationSize.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerCommunicationSize proto.InternalMessageInfo

type FinishResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinishResponse) Reset()         { *m = FinishResponse{} }
func (m *FinishResponse) String() string { return proto.CompactTextString(m) }
func (*FinishResponse) ProtoMessage()    {}
func (*FinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a501bcba839fe29, []int{6}
}
func (m *FinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishResponse.Merge(m, src)
}
func (m *FinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *FinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FinishResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "protobuf.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "protobuf.RegisterResponse")
	proto.RegisterType((*CalculateFinishRequest)(nil), "protobuf.CalculateFinishRequest")
	proto.RegisterType((*CalculateFinishResponse)(nil), "protobuf.CalculateFinishResponse")
	proto.RegisterType((*FinishRequest)(nil), "protobuf.FinishRequest")
	proto.RegisterType((*WorkerCommunicationSize)(nil), "protobuf.workerCommunicationSize")
	proto.RegisterType((*FinishResponse)(nil), "protobuf.FinishResponse")
}

func init() { proto.RegisterFile("master_service.proto", fileDescriptor_9a501bcba839fe29) }

var fileDescriptor_9a501bcba839fe29 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x93, 0x36, 0x0d, 0x93, 0x36, 0x49, 0x57, 0x40, 0x8c, 0x0f, 0x91, 0x6b, 0x21, 0x14,
	0x50, 0x49, 0xa5, 0x96, 0x13, 0xdc, 0x08, 0xaa, 0xc4, 0xa1, 0x10, 0xd9, 0x1c, 0xb8, 0xa1, 0x8d,
	0x3d, 0xb8, 0xab, 0xc4, 0x5e, 0xb3, 0xbb, 0x06, 0xd4, 0x47, 0xe0, 0xc9, 0x7a, 0xe4, 0x11, 0x20,
	0x2f, 0xc0, 0x2b, 0xa0, 0xac, 0xeb, 0xb8, 0xb6, 0xd3, 0xaa, 0xa7, 0x64, 0xbe, 0xf9, 0x7e, 0xc6,
	0xf6, 0x0c, 0x3c, 0x8c, 0xa8, 0x54, 0x28, 0xbe, 0x48, 0x14, 0xdf, 0x99, 0x8f, 0xe3, 0x44, 0x70,
	0xc5, 0x49, 0x5b, 0xff, 0xcc, 0xd2, 0xaf, 0xd6, 0xcb, 0x90, 0xa9, 0x8b, 0x74, 0x36, 0xf6, 0x79,
	0x74, 0x1c, 0xf2, 0x90, 0x1f, 0xe7, 0x1d, 0x5d, 0xe9, 0x42, 0xff, 0xcb, 0x84, 0xce, 0x29, 0xf4,
	0x5c, 0x0c, 0xd9, 0xca, 0xd2, 0xc5, 0x6f, 0x29, 0x4a, 0x45, 0x6c, 0xe8, 0xfc, 0xe0, 0x62, 0x8e,
	0xe2, 0x7d, 0x1c, 0xe0, 0x4f, 0xd3, 0xb0, 0x8d, 0xd1, 0x8e, 0x7b, 0x13, 0x72, 0x1c, 0xe8, 0x17,
	0x22, 0x99, 0xf0, 0x58, 0x22, 0xe9, 0x42, 0x83, 0xcf, 0x35, 0xb9, 0xed, 0x36, 0xf8, 0xdc, 0x79,
	0x0d, 0x8f, 0x27, 0x74, 0xe1, 0xa7, 0x0b, 0xaa, 0xf0, 0x8c, 0xc5, 0x4c, 0x5e, 0xdc, 0xdf, 0xff,
	0x39, 0x0c, 0x6a, 0xda, 0x5b, 0x62, 0x7e, 0x6d, 0xc3, 0x7e, 0xd9, 0xfe, 0x08, 0x0e, 0x68, 0x18,
	0x0a, 0x0c, 0xa9, 0xe2, 0xc2, 0x43, 0x9f, 0xc7, 0x81, 0xd4, 0x02, 0xc3, 0xad, 0x37, 0xca, 0xec,
	0x8f, 0x82, 0x79, 0xec, 0x12, 0xcd, 0x86, 0x1e, 0xa9, 0xde, 0x20, 0xaf, 0xe0, 0x51, 0x01, 0xba,
	0x18, 0xa4, 0x3e, 0x06, 0x5a, 0xd1, 0xd4, 0x8a, 0xcd, 0x4d, 0xe2, 0xc0, 0x1e, 0x53, 0x28, 0xa8,
	0x62, 0x3c, 0xfe, 0x90, 0x46, 0xe6, 0xb6, 0x6d, 0x8c, 0x9a, 0x6e, 0x09, 0x23, 0x2f, 0xa0, 0xbf,
	0xae, 0xf3, 0xa1, 0x77, 0xf4, 0xd0, 0x35, 0x9c, 0x3c, 0x83, 0xae, 0xcf, 0xa3, 0x19, 0x8b, 0x31,
	0x67, 0xb6, 0x34, 0xb3, 0x82, 0x92, 0xa7, 0xb0, 0x9f, 0x26, 0x01, 0x55, 0x38, 0xa5, 0x4c, 0xac,
	0x82, 0x77, 0xf5, 0x94, 0x65, 0x90, 0x8c, 0xa0, 0x17, 0x48, 0x35, 0xa5, 0x42, 0xb1, 0x7c, 0xc0,
	0xb6, 0xe6, 0x55, 0xe1, 0xd5, 0x87, 0xa3, 0x8b, 0xc5, 0x14, 0x51, 0x78, 0x18, 0x07, 0xe6, 0x03,
	0x1d, 0x7a, 0x13, 0x22, 0x6f, 0x60, 0x37, 0xb9, 0xce, 0x02, 0xbb, 0x39, 0xea, 0x9c, 0x1c, 0x8e,
	0xf3, 0xf5, 0x1b, 0x67, 0x1f, 0x78, 0xc2, 0xa3, 0x28, 0x8d, 0x99, 0x9f, 0x3d, 0x10, 0xbb, 0x44,
	0x37, 0x57, 0x10, 0x0b, 0xda, 0xd7, 0x4b, 0xf0, 0xce, 0xec, 0xe8, 0x09, 0xd6, 0xf5, 0xea, 0x51,
	0xce, 0x51, 0x4a, 0x1a, 0xe2, 0x27, 0xae, 0xc3, 0xf7, 0xf4, 0x06, 0x94, 0x41, 0xc7, 0x87, 0xc1,
	0x2d, 0x29, 0x25, 0x73, 0xa3, 0x62, 0x7e, 0x04, 0x07, 0x7e, 0x55, 0x90, 0xef, 0x40, 0xad, 0xe1,
	0xd8, 0xd0, 0xbd, 0x7b, 0x27, 0x4f, 0xfe, 0x19, 0xd0, 0x3a, 0xd7, 0x57, 0x4a, 0x26, 0xd0, 0xce,
	0x2f, 0x85, 0x3c, 0x29, 0xde, 0x45, 0xe5, 0xe4, 0x2c, 0x6b, 0x53, 0x2b, 0x73, 0x77, 0xb6, 0xc8,
	0x19, 0xf4, 0xbc, 0x34, 0x41, 0xe1, 0x29, 0x4c, 0xb2, 0x68, 0x32, 0x28, 0x04, 0xa5, 0xed, 0xb7,
	0xcc, 0x7a, 0x63, 0xed, 0xf3, 0x19, 0x7a, 0x95, 0xb3, 0x22, 0x76, 0x41, 0xdf, 0x7c, 0xad, 0xd6,
	0xe1, 0x1d, 0x8c, 0xdc, 0xf9, 0x6d, 0xff, 0xea, 0xef, 0x70, 0xeb, 0x6a, 0x39, 0x34, 0x7e, 0x2f,
	0x87, 0xc6, 0x9f, 0xe5, 0xd0, 0x98, 0xb5, 0xb4, 0xea, 0xf4, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe4, 0xfe, 0x2c, 0x27, 0xaf, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	SuperStepFinish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishResponse, error)
	CalculateFinish(ctx context.Context, in *CalculateFinishRequest, opts ...grpc.CallOption) (*CalculateFinishResponse, error)
}

type masterClient struct {
	cc *grpc.ClientConn
}

func NewMasterClient(cc *grpc.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Master/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) SuperStepFinish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishResponse, error) {
	out := new(FinishResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Master/SuperStepFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) CalculateFinish(ctx context.Context, in *CalculateFinishRequest, opts ...grpc.CallOption) (*CalculateFinishResponse, error) {
	out := new(CalculateFinishResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Master/CalculateFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
type MasterServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	SuperStepFinish(context.Context, *FinishRequest) (*FinishResponse, error)
	CalculateFinish(context.Context, *CalculateFinishRequest) (*CalculateFinishResponse, error)
}

// UnimplementedMasterServer can be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (*UnimplementedMasterServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedMasterServer) SuperStepFinish(ctx context.Context, req *FinishRequest) (*FinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperStepFinish not implemented")
}
func (*UnimplementedMasterServer) CalculateFinish(ctx context.Context, req *CalculateFinishRequest) (*CalculateFinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFinish not implemented")
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Master/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_SuperStepFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).SuperStepFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Master/SuperStepFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).SuperStepFinish(ctx, req.(*FinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_CalculateFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).CalculateFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Master/CalculateFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).CalculateFinish(ctx, req.(*CalculateFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Master_Register_Handler,
		},
		{
			MethodName: "SuperStepFinish",
			Handler:    _Master_SuperStepFinish_Handler,
		},
		{
			MethodName: "CalculateFinish",
			Handler:    _Master_CalculateFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service.proto",
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WorkerIndex != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.WorkerIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CalculateFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculateFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WorkerIndex != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.WorkerIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CalculateFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculateFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MessageToSend {
		i--
		if m.MessageToSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.WorkerID != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.WorkerID))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PairNum) > 0 {
		for iNdEx := len(m.PairNum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PairNum[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMasterService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.AllPeerSend != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AllPeerSend))))
		i--
		dAtA[i] = 0x49
	}
	if m.DstPartitionNum != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.DstPartitionNum))
		i--
		dAtA[i] = 0x40
	}
	if m.UpdatePairNum != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.UpdatePairNum))
		i--
		dAtA[i] = 0x38
	}
	if m.CombineSeconds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CombineSeconds))))
		i--
		dAtA[i] = 0x31
	}
	if m.IterationSeconds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.IterationSeconds))))
		i--
		dAtA[i] = 0x29
	}
	if m.IterationNum != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.IterationNum))
		i--
		dAtA[i] = 0x20
	}
	if m.AggregatorReducedSize != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.AggregatorReducedSize))
		i--
		dAtA[i] = 0x18
	}
	if m.AggregatorOriSize != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.AggregatorOriSize))
		i--
		dAtA[i] = 0x10
	}
	if m.AggregatorSeconds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AggregatorSeconds))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *WorkerCommunicationSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerCommunicationSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerCommunicationSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommunicationSize != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.CommunicationSize))
		i--
		dAtA[i] = 0x10
	}
	if m.WorkerID != 0 {
		i = encodeVarintMasterService(dAtA, i, uint64(m.WorkerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMasterService(dAtA []byte, offset int, v uint64) int {
	offset -= sovMasterService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerIndex != 0 {
		n += 1 + sovMasterService(uint64(m.WorkerIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculateFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerIndex != 0 {
		n += 1 + sovMasterService(uint64(m.WorkerIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalculateFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AggregatorSeconds != 0 {
		n += 9
	}
	if m.AggregatorOriSize != 0 {
		n += 1 + sovMasterService(uint64(m.AggregatorOriSize))
	}
	if m.AggregatorReducedSize != 0 {
		n += 1 + sovMasterService(uint64(m.AggregatorReducedSize))
	}
	if m.IterationNum != 0 {
		n += 1 + sovMasterService(uint64(m.IterationNum))
	}
	if m.IterationSeconds != 0 {
		n += 9
	}
	if m.CombineSeconds != 0 {
		n += 9
	}
	if m.UpdatePairNum != 0 {
		n += 1 + sovMasterService(uint64(m.UpdatePairNum))
	}
	if m.DstPartitionNum != 0 {
		n += 1 + sovMasterService(uint64(m.DstPartitionNum))
	}
	if m.AllPeerSend != 0 {
		n += 9
	}
	if len(m.PairNum) > 0 {
		for _, e := range m.PairNum {
			l = e.Size()
			n += 1 + l + sovMasterService(uint64(l))
		}
	}
	if m.WorkerID != 0 {
		n += 1 + sovMasterService(uint64(m.WorkerID))
	}
	if m.MessageToSend {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkerCommunicationSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerID != 0 {
		n += 1 + sovMasterService(uint64(m.WorkerID))
	}
	if m.CommunicationSize != 0 {
		n += 1 + sovMasterService(uint64(m.CommunicationSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMasterService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMasterService(x uint64) (n int) {
	return sovMasterService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerIndex", wireType)
			}
			m.WorkerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerIndex", wireType)
			}
			m.WorkerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AggregatorSeconds = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorOriSize", wireType)
			}
			m.AggregatorOriSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregatorOriSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorReducedSize", wireType)
			}
			m.AggregatorReducedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregatorReducedSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationNum", wireType)
			}
			m.IterationNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IterationNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.IterationSeconds = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombineSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CombineSeconds = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePairNum", wireType)
			}
			m.UpdatePairNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatePairNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPartitionNum", wireType)
			}
			m.DstPartitionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPartitionNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPeerSend", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AllPeerSend = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMasterService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMasterService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairNum = append(m.PairNum, &WorkerCommunicationSize{})
			if err := m.PairNum[len(m.PairNum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerID", wireType)
			}
			m.WorkerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageToSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessageToSend = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerCommunicationSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: workerCommunicationSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: workerCommunicationSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerID", wireType)
			}
			m.WorkerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunicationSize", wireType)
			}
			m.CommunicationSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunicationSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMasterService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMasterService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMasterService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMasterService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMasterService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMasterService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMasterService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMasterService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMasterService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMasterService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMasterService   = fmt.Errorf("proto: integer overflow")
)
